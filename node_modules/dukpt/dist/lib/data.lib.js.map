{"version":3,"sources":["../../lib/data.lib.js"],"names":["DataOperations","fieldArray","i","length","padChar","howMany","Array","join","asciiString","Buffer","from","toString","base64String","replace","ba","st","item","hex","hexString","keyar","match","s","String","fromCharCode","Number","push","d","h","charCodeAt","toUpperCase","data1","data2","d1","d2","output","result","hexstringToData","dataToHexstring","isASCII","SPECIAL","symbols","sDecimal","module","exports"],"mappings":";;;;;;IAAMA,c;;;;;;;mCACgBC,U,EAAY;AAC1B,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;AACxC,oBAAID,WAAWC,CAAX,MAAkB,EAAtB,EAA0B;AACtB,2BAAO,IAAP;AACH;AACJ;AACD,mBAAO,KAAP;AACH;;;gCAEcE,O,EAASC,O,EAAS;AAC7B,mBAAQ,IAAIC,KAAJ,CAAUD,UAAU,CAApB,CAAD,CAAyBE,IAAzB,CAA8BH,OAA9B,CAAP;AACH;;;sCAEoBI,W,EAAa;AAC9B,mBAAOC,OAAOC,IAAP,CAAYF,WAAZ,EAAyB,OAAzB,EAAkCG,QAAlC,CAA2C,QAA3C,CAAP;AACH;;;sCAEoBC,Y,EAAc;AAC/B,mBAAOH,OAAOC,IAAP,CAAYE,YAAZ,EAA0B,QAA1B,EAAoCD,QAApC,CAA6C,OAA7C,CAAP;AACH;;;iDAE+BH,W,EAAa;AACzC,mBAAOA,YAAYK,OAAZ,CAAoB,SAApB,EAA+B,EAA/B,CAAP;AACH;;;gDAE8BC,E,EAAI;AAC/B,gBAAIC,KAAK,EAAT;AACA,iBAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIY,GAAGX,MAAvB,EAA+BD,GAA/B,EAAoC;AAChC,oBAAMc,OAAOF,GAAGZ,CAAH,CAAb;AACA,oBAAIe,MAAMD,KAAKL,QAAL,CAAc,EAAd,CAAV;AACA,oBAAIM,IAAId,MAAJ,GAAa,CAAjB,EAAoBc,YAAUA,GAAV;AACpBF,sBAAME,GAAN;AACH;AACD,mBAAOF,EAAP;AACH;;;wCAEsBG,S,EAAW;AAC9B,gBAAID,MAAMC,SAAV;AACAD,kBAAMA,IAAIJ,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN,CAF8B,CAEA;;AAE9B,gBAAMM,QAAQF,IAAIG,KAAJ,CAAU,KAAV,CAAd,CAJ8B,CAIE;;AAEhC,gBAAIC,IAAI,EAAR,CAN8B,CAMjB;;AAEb,iBAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAIiB,MAAMhB,MAA1B,EAAkCD,GAAlC,EAAuC;AACnCmB,qBAAKC,OAAOC,YAAP,CAAoBC,cAAYL,MAAMjB,CAAN,CAAZ,CAApB,CAAL;AACH;;AAED,mBAAOmB,CAAP;AACH;;;gDAE8BH,S,EAAW;AACtC,gBAAID,MAAMC,SAAV;AACAD,kBAAMA,IAAIJ,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN,CAFsC,CAER;;AAE9B,gBAAMM,QAAQF,IAAIG,KAAJ,CAAU,KAAV,CAAd,CAJsC,CAIN;;AAEhC,gBAAMC,IAAI,EAAV,CANsC,CAMvB;;AAEf,iBAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAIiB,MAAMhB,MAA1B,EAAkCD,GAAlC,EAAuC;AACnCmB,kBAAEI,IAAF,CAAOD,cAAYL,MAAMjB,CAAN,CAAZ,CAAP;AACH;;AAED,mBAAOmB,CAAP;AACH;;;wCAEsBK,C,EAAG;AACtB,gBAAIT,MAAM,EAAV;AACA,iBAAK,IAAIf,IAAI,CAAb,EAAgBA,IAAIwB,EAAEvB,MAAtB,EAA8BD,GAA9B,EAAmC;AAC/B,oBAAIyB,IAAKD,EAAEE,UAAF,CAAa1B,CAAb,CAAD,CAAkBS,QAAlB,CAA2B,EAA3B,CAAR;AACA,oBAAIgB,EAAExB,MAAF,GAAW,CAAf,EAAkBwB,UAAQA,CAAR;AAClBV,uBAAOU,CAAP;AACH;AACD,mBAAOV,IAAIY,WAAJ,EAAP;AACH;;;gCAEcC,K,EAAOC,K,EAAO;AACzB,gBAAIC,KAAKF,KAAT;AACA,gBAAIG,KAAKF,KAAT;AACA,gBAAIC,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAnB,EAA2B;AACvB,uBAAO6B,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAtB,EAA8B;AAC1B6B,gCAAUA,EAAV;AACH,iBAHsB,CAGrB;AACL;;AAED,gBAAIA,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAnB,EAA2B;AACvB,uBAAO6B,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAtB,EAA8B;AAC1B8B,gCAAUA,EAAV;AACH,iBAHsB,CAGrB;AACL;;AAED,gBAAIC,SAAS,EAAb;;AAEA,iBAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAI8B,GAAG7B,MAAvB,EAA+BD,GAA/B,EAAoC;AAChC,oBAAMiC,SAASH,GAAGJ,UAAH,CAAc1B,CAAd,IAAmB+B,GAAGL,UAAH,CAAc1B,CAAd,CAAlC;AACAgC,0BAAUZ,OAAOC,YAAP,CAAoBY,MAApB,CAAV;AACH;;AAED,mBAAOD,MAAP;AACH;;;mCAEiBF,E,EAAIC,E,EAAI;AACtB,gBAAIH,QAAQ9B,eAAeoC,eAAf,CAA+BJ,EAA/B,CAAZ;AACA,gBAAID,QAAQ/B,eAAeoC,eAAf,CAA+BH,EAA/B,CAAZ;;AAEA,gBAAIH,MAAM3B,MAAN,GAAe4B,MAAM5B,MAAzB,EAAiC;AAC7B,uBAAO2B,MAAM3B,MAAN,GAAe4B,MAAM5B,MAA5B,EAAoC;AAChC2B,mCAAaA,KAAb;AACH,iBAH4B,CAG3B;AACL;;AAED,gBAAIA,MAAM3B,MAAN,GAAe4B,MAAM5B,MAAzB,EAAiC;AAC7B,uBAAO2B,MAAM3B,MAAN,GAAe4B,MAAM5B,MAA5B,EAAoC;AAChC4B,mCAAaA,KAAb;AACH,iBAH4B,CAG3B;AACL;;AAED,gBAAIG,SAAS,EAAb;;AAEA,iBAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAI4B,MAAM3B,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,oBAAMiC,SAASL,MAAMF,UAAN,CAAiB1B,CAAjB,IAAsB6B,MAAMH,UAAN,CAAiB1B,CAAjB,CAArC;AACAgC,0BAAUZ,OAAOC,YAAP,CAAoBY,MAApB,CAAV;AACH;;AAED,mBAAOnC,eAAeqC,eAAf,CAA+BH,MAA/B,CAAP;AACH;;;gCAEcJ,K,EAAOC,K,EAAO;AACzB,gBAAIC,KAAKF,KAAT;AACA,gBAAIG,KAAKF,KAAT;AACA,gBAAIC,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAnB,EAA2B;AACvB,uBAAO6B,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAtB,EAA8B;AAC1B6B,gCAAUA,EAAV;AACH,iBAHsB,CAGrB;AACL;;AAED,gBAAIA,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAnB,EAA2B;AACvB,uBAAO6B,GAAG7B,MAAH,GAAY8B,GAAG9B,MAAtB,EAA8B;AAC1B8B,gCAAUA,EAAV;AACH,iBAHsB,CAGrB;AACL;;AAED,gBAAIC,SAAS,EAAb;;AAEA,iBAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAI8B,GAAG7B,MAAvB,EAA+BD,GAA/B,EAAoC;AAChC,oBAAMiC,SAASH,GAAGJ,UAAH,CAAc1B,CAAd,IAAmB+B,GAAGL,UAAH,CAAc1B,CAAd,CAAlC;AACAgC,0BAAUZ,OAAOC,YAAP,CAAoBY,MAApB,CAAV;AACH;;AAED,mBAAOD,MAAP;AACH;;;kCAEgBjB,G,EAAK;AAClB,gBAAIU,IAAIV,GAAR;;AAEA,qBAASqB,OAAT,CAAiBjB,CAAjB,EAAoB;AAChB,uBAAOA,KAAK,EAAL,IAAWA,IAAI,GAAtB;AACH;;AAEDM,gBAAIA,EAAEd,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAJ,CAPkB,CAOQ;;AAE1B,gBAAM0B,UAAU,GAAhB,CATkB,CASG;AACrB,gBAAMC,UAAUb,EAAEP,KAAF,CAAQ,KAAR,CAAhB;AACA,gBAAMc,SAAS,EAAf;AACA,iBAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAIsC,QAAQrC,MAA5B,EAAoCD,GAApC,EAAyC;AACrC,oBAAMmB,IAAImB,QAAQtC,CAAR,CAAV;AACA,oBAAMuC,WAAWjB,cAAYH,CAAZ,CAAjB;AACAa,uBAAOT,IAAP,CAAYa,QAAQG,QAAR,IACRnB,OAAOC,YAAP,CAAoBkB,QAApB,CADQ,GACwBF,OADpC;AAEH;AACD,mBAAOL,OAAO3B,IAAP,CAAY,EAAZ,CAAP;AACH;;;;;;AAGLmC,OAAOC,OAAP,GAAiB3C,cAAjB","file":"data.lib.js","sourcesContent":["class DataOperations {\n    static fieldEmpty(fieldArray) {\n        for (let i = 0; i < fieldArray.length; i++) {\n            if (fieldArray[i] === '') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static getPads(padChar, howMany) {\n        return (new Array(howMany + 1)).join(padChar);\n    }\n\n    static asciiToBase64(asciiString) {\n        return Buffer.from(asciiString, 'utf-8').toString('base64');\n    }\n\n    static base64ToAscii(base64String) {\n        return Buffer.from(base64String, 'base64').toString('utf-8');\n    }\n\n    static removeNullCharsFromAscii(asciiString) {\n        return asciiString.replace(/\\u0000/g, '');\n    }\n\n    static numericArrayToHexstring(ba) {\n        let st = '';\n        for (let i = 0; i < ba.length; i++) {\n            const item = ba[i];\n            let hex = item.toString(16);\n            if (hex.length < 2) hex = `0${hex}`;\n            st += hex;\n        }\n        return st;\n    }\n\n    static hexstringToData(hexString) {\n        let hex = hexString;\n        hex = hex.replace(/\\s/g, ''); // eliminate spaces\n\n        const keyar = hex.match(/../g); // break into array of doublets\n\n        let s = '';  // holder for our return value\n\n        for (let i = 0; i < keyar.length; i++) {\n            s += String.fromCharCode(Number(`0x${keyar[i]}`));\n        }\n\n        return s;\n    }\n\n    static hexstringToNumericArray(hexString) {\n        let hex = hexString;\n        hex = hex.replace(/\\s/g, ''); // eliminate spaces\n\n        const keyar = hex.match(/../g); // break into array of doublets\n\n        const s = [];  // holder for our return value\n\n        for (let i = 0; i < keyar.length; i++) {\n            s.push(Number(`0x${keyar[i]}`));\n        }\n\n        return s;\n    }\n\n    static dataToHexstring(d) {\n        let hex = '';\n        for (let i = 0; i < d.length; i++) {\n            let h = (d.charCodeAt(i)).toString(16);\n            if (h.length < 2) h = `0${h}`;\n            hex += h;\n        }\n        return hex.toUpperCase();\n    }\n\n    static XORdata(data1, data2) {\n        let d1 = data1;\n        let d2 = data2;\n        if (d1.length < d2.length) {\n            while (d1.length < d2.length) {\n                d1 = `\\0${d1}`;\n            } // prepend with nulls\n        }\n\n        if (d1.length > d2.length) {\n            while (d1.length > d2.length) {\n                d2 = `\\0${d2}`;\n            } // prepend with nulls\n        }\n\n        let output = '';\n\n        for (let i = 0; i < d1.length; i++) {\n            const result = d1.charCodeAt(i) ^ d2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return output;\n    }\n\n    static XORdataHex(d1, d2) {\n        let data1 = DataOperations.hexstringToData(d1);\n        let data2 = DataOperations.hexstringToData(d2);\n\n        if (data1.length < data2.length) {\n            while (data1.length < data2.length) {\n                data1 = `\\0${data1}`;\n            } // prepend with nulls\n        }\n\n        if (data1.length > data2.length) {\n            while (data1.length > data2.length) {\n                data2 = `\\0${data2}`;\n            } // prepend with nulls\n        }\n\n        let output = '';\n\n        for (let i = 0; i < data1.length; i++) {\n            const result = data1.charCodeAt(i) ^ data2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return DataOperations.dataToHexstring(output);\n    }\n\n    static ANDdata(data1, data2) {\n        let d1 = data1;\n        let d2 = data2;\n        if (d1.length < d2.length) {\n            while (d1.length < d2.length) {\n                d1 = `\\0${d1}`;\n            } // prepend with nulls\n        }\n\n        if (d1.length > d2.length) {\n            while (d1.length > d2.length) {\n                d2 = `\\0${d2}`;\n            } // prepend with nulls\n        }\n\n        let output = '';\n\n        for (let i = 0; i < d1.length; i++) {\n            const result = d1.charCodeAt(i) & d2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return output;\n    }\n\n    static hexToText(hex) {\n        let h = hex;\n\n        function isASCII(s) {\n            return s >= 32 && s < 127;\n        }\n\n        h = h.replace(/\\s/g, ''); // eliminate spaces\n\n        const SPECIAL = '.'; // String.fromCharCode(9744);\n        const symbols = h.match(/../g);\n        const output = [];\n        for (let i = 0; i < symbols.length; i++) {\n            const s = symbols[i];\n            const sDecimal = Number(`0x${s}`);\n            output.push(isASCII(sDecimal) ?\n                String.fromCharCode(sDecimal) : SPECIAL);\n        }\n        return output.join('');\n    }\n}\n\nmodule.exports = DataOperations;\n"]}
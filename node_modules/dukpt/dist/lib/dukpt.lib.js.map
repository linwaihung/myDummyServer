{"version":3,"sources":["../../lib/dukpt.lib.js"],"names":["aesjs","require","DataOperations","Dukpt","bdk","ksn","_sessionKey","_deriveDukptSessionKey","keyMode","dBDK","dKSN","fieldEmpty","Error","replace","length","ipek","_createIPEK","_createDataKeyHex","_createPINKeyHex","_createMACKeyHex","dataToEncrypt","encryptOptions","data","encryptedOutput","_defaultOptions","encryptionMode","inputEncoding","outputEncoding","options","Object","assign","toLowerCase","dataToHexstring","key","toUpperCase","_EDE3KeyExpand","encryptTDES","encryptAES","dataToDecrypt","decryptOptions","encryptedData","decryptedOutput","decryptionMode","trimOutput","decryptAES","removeNullCharsFromAscii","derivedPEK","_deriveKeyHex","CBC","iv","variantMask","maskedPEK","XORdataHex","hexstringToData","left","_des","substring","right","sessionKey","encryptTrueFalse","binaryKey","binaryData","e","maskedKSN","ANDdata","cipher","IPEK","mask","XORdata","tailbytes","integerValue","charCodeAt","ksnString","baseKSN","curKey","counter","_getCounter","shiftReg","tmpKSN","byte5","byte6","byte7","tmpLong","String","fromCharCode","_generateKey","maskedKey","_encryptRegister","reg","bottom8","top8","bottom8xorKSN","desEncrypted","binipek","binksn","dk","_deriveKey","message","encrypt","mode","padding","msg","spfunction1","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","keys","_desCreateKeys","m","i","j","temp","right1","right2","looping","cbcleft","cbcleft2","cbcright","cbcright2","endloop","loopinc","len","chunk","iterations","result","tempresult","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","Array","shifts","lefttemp","righttemp","n","keyArray","hexstringToNumericArray","dataArray","push","ModeOfOperation","cbc","aesCbc","accumulate","a","b","bytes","Buffer","from","slice","numericArrayToHexstring","decrypt","module","exports"],"mappings":"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","file":"dukpt.lib.js","sourcesContent":["const aesjs = require('aes-js');\nconst DataOperations = require('./data.lib');\n\nclass Dukpt {\n    constructor(bdk, ksn) {\n        this.bdk = bdk;\n        this.ksn = ksn;\n        this._sessionKey = this._deriveDukptSessionKey();\n    }\n\n    _deriveDukptSessionKey(keyMode = 'datakey') {\n        const dBDK = this.bdk;\n        const dKSN = this.ksn;\n\n        if (DataOperations.fieldEmpty([dBDK, dKSN])) {\n            return new Error('a field is blank');\n        }\n        if (dBDK.replace(/\\s/g, '').length !== 32 ||\n            dKSN.replace(/\\s/g, '').length !== 20) {\n            return new Error('Key must be 16 bytes long and KSN must be 10 bytes');\n        }\n\n        const ipek = Dukpt._createIPEK(dBDK, dKSN); // Always start with IPEK\n\n        if (keyMode === 'datakey') { this._sessionKey = Dukpt._createDataKeyHex(ipek, dKSN); }\n\n        if (keyMode === 'pinkey') {\n            this._sessionKey = Dukpt._createPINKeyHex(ipek, dKSN);\n        }\n\n        if (keyMode === 'mackey') {\n            this._sessionKey = Dukpt._createMACKeyHex(ipek, dKSN);\n        }\n\n        return this._sessionKey;\n    }\n\n    static generateDukptSessionKey(ipek, ksn) {\n        if (DataOperations.fieldEmpty([ipek, ksn])) {\n            throw new Error('either IPEK or data params not provided');\n        }\n\n        return Dukpt._createDataKeyHex(ipek, ksn);\n    }\n\n    static _createDataKeyHex(ipek, ksn) {\n        const derivedPEK = Dukpt._deriveKeyHex(ipek, ksn);\n\n        const CBC = 1; // cipher block chaining enabled\n        const iv = '\\0\\0\\0\\0\\0\\0\\0\\0'; // initial vector\n        const variantMask = '0000000000FF00000000000000FF0000'; // data variant\n\n        let maskedPEK = DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n\n        maskedPEK = DataOperations.hexstringToData(maskedPEK);\n\n        // We need to TDES-encrypt the masked key in two parts, using\n        // itself as the key. This is a so-called one-way function (OWF).\n        // The leftmost 8 bytes are encrypted, then\n        // the rightmost 8 bytes are encrypted separately. In each case,\n        // the key is the entire original 16-byte maskedPEK from the\n        // above step, expanded to 24 bytes per EDE3.\n\n        // left half:\n        const left = Dukpt._des(Dukpt._EDE3KeyExpand(maskedPEK),\n            maskedPEK.substring(0, 8),\n            true,\n            CBC,\n            iv,\n            null);\n\n        // right half:\n        const right = Dukpt._des(Dukpt._EDE3KeyExpand(maskedPEK),\n            maskedPEK.substring(8),\n            true,\n            CBC,\n            iv,\n            null);\n\n        let sessionKey = left + right;\n\n        sessionKey = DataOperations.dataToHexstring(sessionKey);\n        return sessionKey; // hex\n    }\n\n    static _createPINKeyHex(ipek, ksn) {\n        const derivedPEK = Dukpt._deriveKeyHex(ipek, ksn); // derive DUKPT basis key\n        const variantMask = '00000000000000FF00000000000000FF'; // PIN variant\n        return DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n    }\n\n    static _createMACKeyHex(ipek, ksn) {\n        const derivedPEK = Dukpt._deriveKeyHex(ipek, ksn); // derive DUKPT basis key\n        const variantMask = '000000000000FF00000000000000FF00'; // MAC variant\n        return DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n    }\n\n    static encryptTDES(key, data, encryptTrueFalse) {\n        const CBC = 1; // cipher block chaining enabled\n        const iv = '\\0\\0\\0\\0\\0\\0\\0\\0'; // initial vector\n\n        try {\n            // convert to binary\n            const binaryKey = DataOperations.hexstringToData(key);\n            let binaryData = DataOperations.hexstringToData(data);\n\n            // data should be a multiple of 8 bytes\n            while (binaryData.length % 8) {\n                binaryData += '\\0';\n            }\n\n            return Dukpt._des(binaryKey,\n                binaryData,\n                encryptTrueFalse,\n                CBC,\n                iv,\n                null);\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    dukptEncrypt(dataToEncrypt, encryptOptions) {\n        let data = dataToEncrypt;\n        let encryptedOutput = null;\n\n        const _defaultOptions = {\n            encryptionMode: '3DES',\n            inputEncoding: 'ascii',\n            outputEncoding: 'hex'\n        };\n\n        const options = Object.assign({}, _defaultOptions, encryptOptions);\n\n        switch (options.inputEncoding.toLowerCase()) {\n        case 'ascii':\n            data = DataOperations.dataToHexstring(data);\n            break;\n        case 'hex':\n                // do nothing\n            break;\n        default:\n            throw new Error(`unsupported input encoding type for dukpt encrypt : '${options.inputEncoding}'`);\n        }\n\n        let key = this._sessionKey.replace(/\\s/g, ''); // remove spaces\n\n        if (!key || !data) {\n            throw new Error('either session key or data not provided');\n        }\n\n        data = data.replace(/\\s/g, '');\n\n        if (key.length === 32 && options.encryptionMode.toUpperCase() !== 'AES') {\n            key = Dukpt._EDE3KeyExpand(key);\n        }\n\n        switch (options.encryptionMode.toUpperCase()) {\n        case '3DES':\n            encryptedOutput = Dukpt.encryptTDES(key, data, true);\n            break;\n        case 'AES':\n            encryptedOutput = Dukpt.encryptAES(key, data);\n            break;\n        default:\n            throw new Error('unsupported dukpt encryption method');\n        }\n\n        switch (options.outputEncoding.toLowerCase()) {\n        case 'hex':\n            encryptedOutput = DataOperations.dataToHexstring(encryptedOutput);\n            break;\n        case 'ascii':\n                // do nothing\n            break;\n        default:\n            throw new Error(`unsupported output encoding type for dukpt decrypt : '${options.outputEncoding}'`);\n        }\n\n        return encryptedOutput;\n    }\n\n    dukptDecrypt(dataToDecrypt, decryptOptions) {\n        let encryptedData = dataToDecrypt;\n        let decryptedOutput = null;\n\n        const _defaultOptions = {\n            decryptionMode: '3DES',\n            trimOutput: false,\n            inputEncoding: 'hex',\n            outputEncoding: 'ascii'\n        };\n\n        const options = Object.assign({}, _defaultOptions, decryptOptions);\n\n        let key = this._sessionKey.replace(/\\s/g, ''); // remove spaces\n\n        if (!key || !encryptedData) {\n            throw new Error('either session key or data not provided');\n        }\n\n        encryptedData = encryptedData.replace(/\\s/g, '');\n\n        if (key.length === 32 && options.decryptionMode.toUpperCase() !== 'AES') {\n            key = Dukpt._EDE3KeyExpand(key);\n        }\n\n        switch (options.decryptionMode.toUpperCase()) {\n        case '3DES':\n            decryptedOutput = Dukpt.encryptTDES(key, encryptedData, false);\n            break;\n        case 'AES':\n            decryptedOutput = Dukpt.decryptAES(key, encryptedData);\n            break;\n        default:\n            throw new Error('unsupported dukpt decryption method');\n        }\n\n        if (options.trimOutput) {\n            decryptedOutput = DataOperations.removeNullCharsFromAscii(decryptedOutput);\n        }\n\n        switch (options.outputEncoding.toLowerCase()) {\n        case 'ascii':\n                // do nothing\n            break;\n        case 'hex':\n            decryptedOutput = DataOperations.dataToHexstring(decryptedOutput);\n            break;\n        default:\n            throw new Error('unsupported output encoding for dukpt decrypt');\n        }\n\n        return decryptedOutput;\n    }\n\n    static _EDE3KeyExpand(key) {\n        return key + key.substring(0, key.length / 2);\n    }\n\n    static _createIPEK(bdk, ksn) {\n        const CBC = 1; // cipher block chaining enabled\n        const iv = '\\0\\0\\0\\0\\0\\0\\0\\0'; // initial vector\n\n        let key = Dukpt._EDE3KeyExpand(bdk); // make 24-byte key\n        key = DataOperations.hexstringToData(key); // make it binary\n\n        let maskedKSN = DataOperations.ANDdata(\n            DataOperations.hexstringToData('FFFFFFFFFFFFFFE00000'),\n            DataOperations.hexstringToData(ksn)\n        ); // this is now binary\n\n        maskedKSN = maskedKSN.substring(0, 8); // take 1st 8 bytes only\n\n        // get LEFT half of IPEK\n        let cipher = Dukpt._des(key,\n            maskedKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        let IPEK = DataOperations.dataToHexstring(cipher);\n\n        // get RIGHT half of IPEK\n        const mask = 'C0C0C0C000000000C0C0C0C000000000';\n        key = DataOperations.XORdata(DataOperations.hexstringToData(mask), DataOperations.hexstringToData(bdk));\n        key = Dukpt._EDE3KeyExpand(key);\n        cipher = Dukpt._des(key,\n            maskedKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        // join the new cipher to the end of the IPEK:\n        IPEK += DataOperations.dataToHexstring(cipher);\n\n        return IPEK;\n    }\n\n    static _getCounter(ksn) {\n        const tailbytes = ksn.substring(ksn.length - 3);\n        const integerValue = (tailbytes.charCodeAt(0) << 16) +\n            (tailbytes.charCodeAt(1) << 8) +\n            tailbytes.charCodeAt(2);\n        return integerValue & 0x1FFFFF;\n    }\n\n    static _deriveKey(ipek, ksnString) {\n        let ksn = ksnString;\n        if (ksn.length === 10) {\n            ksn = ksn.substring(2);\n        } // we want the bottom 8 bytes\n\n        let baseKSN = DataOperations.ANDdata(DataOperations.hexstringToData('FFFFFFFFFFE00000'), ksn);\n        let curKey = ipek;\n        const counter = Dukpt._getCounter(ksn);\n\n        for (let shiftReg = 0x100000; shiftReg > 0; shiftReg >>= 1) {\n            if ((shiftReg & counter) > 0) {\n                // Need to do baseKSN |= shiftReg\n\n                let tmpKSN = baseKSN.substring(0, 5);\n                const byte5 = baseKSN.charCodeAt(5);\n                const byte6 = baseKSN.charCodeAt(6);\n                const byte7 = baseKSN.charCodeAt(7);\n                let tmpLong = (byte5 << 16) + (byte6 << 8) + byte7;\n                tmpLong |= shiftReg;\n                tmpKSN += String.fromCharCode(tmpLong >> 16);\n                tmpKSN += String.fromCharCode(255 & (tmpLong >> 8));\n                tmpKSN += String.fromCharCode(255 & tmpLong);\n\n                baseKSN = tmpKSN; // remember the updated value\n\n                curKey = Dukpt._generateKey(curKey, tmpKSN);\n            }\n        }\n\n        return curKey; // binary\n    }\n\n    static _generateKey(key, ksn) {\n        const mask = 'C0C0C0C000000000C0C0C0C000000000';\n        const maskedKey = DataOperations.XORdata(DataOperations.hexstringToData(mask), key);\n\n        const left = Dukpt._encryptRegister(maskedKey, ksn);\n        const right = Dukpt._encryptRegister(key, ksn);\n\n        return left + right; // binary\n    }\n\n    static _encryptRegister(key, reg) {\n        const CBC = 1; // cipher block chaining enabled\n        const iv = '\\0\\0\\0\\0\\0\\0\\0\\0'; // initial vector\n\n        const bottom8 = key.substring(key.length - 8); // bottom 8 bytes\n\n        const top8 = key.substring(0, 8); // top 8 bytes\n\n        const bottom8xorKSN = DataOperations.XORdata(bottom8, reg);\n\n        // This will be single-DES because of the 8-byte key:\n        const desEncrypted = Dukpt._des(top8,\n            bottom8xorKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        return DataOperations.XORdata(bottom8, desEncrypted);\n    }\n\n    static _deriveKeyHex(ipek, ksn) {\n        const binipek = DataOperations.hexstringToData(ipek);\n        const binksn = DataOperations.hexstringToData(ksn);\n\n        const dk = Dukpt._deriveKey(binipek, binksn);\n        return DataOperations.dataToHexstring(dk);\n    }\n\n    static _des(key, message, encrypt, mode, iv, padding) {\n        let msg = message;\n        // declaring this locally speeds things up a bit\n        const spfunction1 = [\n            0x1010400, 0, 0x10000, 0x1010404, 0x1010004,\n            0x10404, 0x4, 0x10000, 0x400, 0x1010400,\n            0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000,\n            0x4, 0x404, 0x1000400, 0x1000400, 0x10400,\n            0x10400, 0x1010000, 0x1010000, 0x1000404,\n            0x10004, 0x1000004, 0x1000004, 0x10004,\n            0, 0x404, 0x10404, 0x1000000, 0x10000,\n            0x1010404, 0x4, 0x1010000, 0x1010400,\n            0x1000000, 0x1000000, 0x400, 0x1010004,\n            0x10000, 0x10400, 0x1000004, 0x400, 0x4,\n            0x1000404, 0x10404, 0x1010404, 0x10004,\n            0x1010000, 0x1000404, 0x1000004, 0x404,\n            0x10404, 0x1010400, 0x404, 0x1000400,\n            0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004\n        ];\n        const spfunction2 = [\n            -0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000,\n            0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0,\n            -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20,\n            -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0,\n            -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020,\n            -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000,\n            0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0,\n            -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000,\n            0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000,\n            0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020,\n            -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000,\n            0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000\n        ];\n        const spfunction3 = [\n            0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0,\n            0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008,\n            0x20000, 0x8020208, 0x20008, 0x8020000, 0x208,\n            0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000,\n            0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208,\n            0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000,\n            0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200,\n            0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0,\n            0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208,\n            0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208,\n            0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200\n        ];\n        const spfunction4 = [\n            0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081,\n            0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81,\n            0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001,\n            0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080,\n            0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001,\n            0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080,\n            0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81,\n            0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001,\n            0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080\n        ];\n        const spfunction5 = [\n            0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100,\n            0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100,\n            0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000,\n            0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000,\n            0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100,\n            0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100,\n            0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100,\n            0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0,\n            0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000,\n            0x2080100, 0x40000100\n        ];\n        const spfunction6 = [\n            0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010,\n            0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000,\n            0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010,\n            0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000,\n            0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010,\n            0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010,\n            0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0,\n            0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010,\n            0, 0x20404000, 0x20000000, 0x400010, 0x20004010\n        ];\n        const spfunction7 = [\n            0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800,\n            0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800,\n            0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002,\n            0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800,\n            0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002,\n            0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802,\n            0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802,\n            0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002\n        ];\n        const spfunction8 = [\n            0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000,\n            0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000,\n            0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040,\n            0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000,\n            0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040,\n            0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040,\n            0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040,\n            0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040,\n            0x1040, 0x40040, 0x10000000, 0x10041000\n        ];\n\n        // create the subkeys we will need\n        const keys = Dukpt._desCreateKeys(key);\n        let m = 0;\n        let i;\n        let j;\n        let temp;\n        let right1;\n        let right2;\n        let left;\n        let right;\n        let looping;\n        let cbcleft;\n        let cbcleft2;\n        let cbcright;\n        let cbcright2;\n        let endloop;\n        let loopinc;\n        let len = msg.length;\n        let chunk = 0;\n        // set up the loops for single and triple _des\n        const iterations = keys.length === 32 ? 3 : 9; // single or triple _des\n        if (iterations === 3) {\n            looping = encrypt ? [0, 32, 2] : [30, -2, -2];\n        } else {\n            looping = encrypt ? [0, 32, 2, 62, 30, -2, 64, 96, 2] : [94, 62, -2, 32, 64, 2, 30, -2, -2];\n        }\n\n        // pad the msg depending on the padding parameter\n        if (padding === 2) msg += '        '; // pad the msg with spaces\n        else if (padding === 1) {\n            temp = 8 - (len % 8);\n            msg += String.fromCharCode(temp, temp, temp, temp, temp, temp, temp, temp);\n            if (temp === 8) len += 8;\n        } else if (!padding) msg += '\\0\\0\\0\\0\\0\\0\\0\\0'; // pad the msg out with null bytes\n\n        // store the result here\n        let result = '';\n        let tempresult = '';\n\n        if (mode === 1) { // CBC mode\n            cbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n            cbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n            m = 0;\n        }\n\n        // loop through each 64 bit chunk of the msg\n        while (m < len) {\n            left = (msg.charCodeAt(m++) << 24) | (msg.charCodeAt(m++) << 16) | (msg.charCodeAt(m++) << 8) | msg.charCodeAt(m++);\n            right = (msg.charCodeAt(m++) << 24) | (msg.charCodeAt(m++) << 16) | (msg.charCodeAt(m++) << 8) | msg.charCodeAt(m++);\n\n            // for Cipher Block Chaining mode, xor the msg with the previous result\n            if (mode === 1) {\n                if (encrypt) {\n                    left ^= cbcleft;\n                    right ^= cbcright;\n                } else {\n                    cbcleft2 = cbcleft;\n                    cbcright2 = cbcright;\n                    cbcleft = left;\n                    cbcright = right;\n                }\n            }\n\n            // first each 64 but chunk of the msg must be permuted according to IP\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n            temp = ((left >>> 16) ^ right) & 0x0000ffff;\n            right ^= temp;\n            left ^= (temp << 16);\n            temp = ((right >>> 2) ^ left) & 0x33333333;\n            left ^= temp;\n            right ^= (temp << 2);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n\n            left = ((left << 1) | (left >>> 31));\n            right = ((right << 1) | (right >>> 31));\n\n            // do this either 1 or 3 times for each chunk of the msg\n            for (j = 0; j < iterations; j += 3) {\n                endloop = looping[j + 1];\n                loopinc = looping[j + 2];\n                // now go through and perform the encryption or decryption\n                for (i = looping[j]; i !== endloop; i += loopinc) { // for efficiency\n                    right1 = right ^ keys[i];\n                    right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n                    // the result is attained by passing these bytes through the S selection functions\n                    temp = left;\n                    left = right;\n                    right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n                        | spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f]\n                        | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n                        | spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n                }\n                temp = left;\n                left = right;\n                right = temp; // unreverse left and right\n            } // for either 1 or 3 iterations\n\n            // move then each one bit to the right\n            left = ((left >>> 1) | (left << 31));\n            right = ((right >>> 1) | (right << 31));\n\n            // now perform IP-1, which is IP in the opposite direction\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((right >>> 2) ^ left) & 0x33333333;\n            left ^= temp;\n            right ^= (temp << 2);\n            temp = ((left >>> 16) ^ right) & 0x0000ffff;\n            right ^= temp;\n            left ^= (temp << 16);\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n\n            // for Cipher Block Chaining mode, xor the msg with the previous result\n            if (mode === 1) {\n                if (encrypt) {\n                    cbcleft = left;\n                    cbcright = right;\n                } else {\n                    left ^= cbcleft2;\n                    right ^= cbcright2;\n                }\n            }\n            tempresult += String.fromCharCode(\n                (left >>> 24),\n                ((left >>> 16) & 0xff),\n                ((left >>> 8) & 0xff),\n                (left & 0xff),\n                (right >>> 24),\n                ((right >>> 16) & 0xff),\n                ((right >>> 8) & 0xff),\n                (right & 0xff)\n            );\n\n            chunk += 8;\n            if (chunk === 512) {\n                result += tempresult;\n                tempresult = '';\n                chunk = 0;\n            }\n        } // for every 8 characters, or 64 bits in the msg\n\n        result += tempresult;\n        /* result = result.replace(/\\0*$/g, \"\"); */\n\n        return result;\n    }\n\n    static _desCreateKeys(key) {\n        const pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204];\n        const pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101];\n        const pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808];\n        const pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000];\n        const pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010];\n        const pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420];\n        const pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002];\n        const pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800];\n        const pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002];\n        const pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408];\n        const pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020];\n        const pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200];\n        const pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010];\n        const pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105];\n\n        // how many iterations (1 for _des, 3 for triple _des)\n        const iterations = key.length > 8 ? 3 : 1; // use Triple DES for 9+ byte keys\n        // stores the return keys\n        const keys = new Array(32 * iterations);\n        // now define the left shifts which need to be done\n        const shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n        // other variables\n        let lefttemp;\n        let righttemp;\n        let m = 0;\n        let n = 0;\n        let temp;\n\n        for (let j = 0; j < iterations; j++) { // either 1 or 3 iterations\n            let left = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n            let right = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n            temp = ((right >>> -16) ^ left) & 0x0000ffff;\n            left ^= temp;\n            right ^= (temp << -16);\n            temp = ((left >>> 2) ^ right) & 0x33333333;\n            right ^= temp;\n            left ^= (temp << 2);\n            temp = ((right >>> -16) ^ left) & 0x0000ffff;\n            left ^= temp;\n            right ^= (temp << -16);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n\n            // the right side needs to be shifted and to get the last four bits of the left side\n            temp = (left << 8) | ((right >>> 20) & 0x000000f0);\n            // left needs to be put upside down\n            left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n            right = temp;\n\n            // now go through and perform these shifts on the left and right keys\n            for (let i = 0; i < shifts.length; i++) {\n                // shift the keys either one or two bits to the left\n                if (shifts[i]) {\n                    left = (left << 2) | (left >>> 26);\n                    right = (right << 2) | (right >>> 26);\n                } else {\n                    left = (left << 1) | (left >>> 27);\n                    right = (right << 1) | (right >>> 27);\n                }\n                left &= -0xf;\n                right &= -0xf;\n\n                // Now apply PC-2, in such a way that E is easier when encrypting or decrypting.\n                // This conversion will look like PC-2 except only the last 6 bits of each byte are used\n                // rather than 48 consecutive bits and the order of lines will be according to\n                // how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n                lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n                    | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n                    | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n                    | pc2bytes6[(left >>> 4) & 0xf];\n                righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n                    | pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n                    | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n                    | pc2bytes13[(right >>> 4) & 0xf];\n                temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n                keys[n++] = lefttemp ^ temp;\n                keys[n++] = righttemp ^ (temp << 16);\n            }\n        } // for each iterations\n        // return the keys we've created\n        return keys;\n    }\n\n    static encryptAES(key, data) {\n        // convert to integer arrays for AES\n        const keyArray = DataOperations.hexstringToNumericArray(key);\n        const dataArray = DataOperations.hexstringToNumericArray(data);\n\n        if (keyArray.length !== 16) {\n            throw new Error('Key must be 16 bytes for AES.');\n        }\n\n        while (dataArray.length % 16) { dataArray.push(0); }  // pad with zeroes\n\n        // The initialization vector, which can be null\n        const iv = null;\n\n        // We will use CBC mode:\n        const CBC = aesjs.ModeOfOperation.cbc;\n        const aesCbc = new CBC(keyArray, iv);\n\n        function accumulate(a, b) {\n            for (let i = 0; i < b.length; i++) {\n                a.push(b[i]);\n            }\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < dataArray.length; i += 16) {\n            const result = aesCbc.encrypt(Buffer.from(dataArray.slice(i, i + 16)));\n            accumulate(bytes, result);\n        }\n\n        return DataOperations.hexstringToData(DataOperations.numericArrayToHexstring(bytes));\n    }\n\n    static decryptAES(key, data) {\n        // convert to integer arrays for AES\n        const keyArray = DataOperations.hexstringToNumericArray(key);\n        const dataArray = DataOperations.hexstringToNumericArray(data);\n\n        if (keyArray.length !== 16) {\n            throw new Error('Key must be 16 bytes for AES.');\n        }\n\n        while (dataArray.length % 16) {\n            dataArray.push(0);\n        }  // pad with zeroes\n\n        // The initialization vector, which can be null\n        const iv = null;\n\n        // We will use CBC mode:\n        const CBC = aesjs.ModeOfOperation.cbc;\n        const aesCbc = new CBC(keyArray, iv);\n\n        function accumulate(a, b) {\n            for (let i = 0; i < b.length; i++) {\n                a.push(b[i]);\n            }\n        }\n\n        const bytes = [];\n\n        for (let i = 0; i < dataArray.length; i += 16) {\n            const result = aesCbc.decrypt(Buffer.from(dataArray.slice(i, i + 16)));\n            accumulate(bytes, result);\n        }\n\n        return DataOperations.hexstringToData(DataOperations.numericArrayToHexstring(bytes));\n    }\n}\n\nmodule.exports = Dukpt;\n"]}
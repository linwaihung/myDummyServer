{"version":3,"sources":["../../../test/lib/data.lib.test.js"],"names":["should","require","RandExp","DataOperations","getRandomString","gen","getRandomNumericArray","largestNumber","res","upperBount","i","push","Math","round","random","getRandomStringArray","addEmptyElements","result","randomIndex","describe","it","done","padding","getPads","length","equal","replace","base64Encoded","asciiToBase64","base64ToAscii","sanitizedString","removeNullCharsFromAscii","randomArray","smallNumbers","hexEncoded","numericArrayToHexstring","smallHexEncoded","test","be","true","resultArr","hexstringToNumericArray","forEach","number","randomString","Buffer","from","toString","hexToText","str1","str2","xorOutput","XORdata","parseInt","str1Hex","str2Hex","xorOutputHex","XORdataHex","andOutput","ANDdata","andOutputReversed","randomArrayWithEmpty","fieldEmpty","false"],"mappings":"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","file":"data.lib.test.js","sourcesContent":["const should = require('should');\nconst RandExp = require('randexp');\nconst DataOperations = require('../../lib/data.lib');\n\nfunction getRandomString() {\n    return new RandExp(/[a-zA-Z0-9]{10,50}/).gen();\n}\n\nfunction getRandomNumericArray(largestNumber) {\n    const res = [];\n\n    let upperBount = largestNumber || 100;\n\n    for(let i=0; i< 10; i++){\n        res.push(Math.round(Math.random()*upperBount));\n    }\n    return res;\n}\n\nfunction getRandomStringArray(addEmptyElements) {\n    const result = [];\n\n    const randomIndex = Math.round(Math.random() * 9);\n\n    for(let i=0; i< 10; i++){\n        if (i===randomIndex && addEmptyElements){\n            result.push('');\n        }\n        else{\n            result.push(getRandomString());\n        }\n    }\n\n    return result;\n}\n\ndescribe('data operations test suite', () => {\n    it('should return requested padding string when called getpads', (done) => {\n        const padding = DataOperations.getPads('0', 10);\n        padding.length.should.equal(10);\n        padding.replace(/0/g,'').length.should.equal(0);\n        done();\n    });\n\n    it('should return \"ZHVrcHQ=\" when the word \"dukpt\" is base64 encoded', (done) => {\n        const base64Encoded = DataOperations.asciiToBase64('dukpt');\n        base64Encoded.should.equal('ZHVrcHQ=');\n        done();\n    });\n\n    it('should return \"dukpt\" when the base64 encoded text \"ZHVrcHQ=\" is base64 decoded', (done) => {\n        const base64Encoded = DataOperations.base64ToAscii('ZHVrcHQ=');\n        base64Encoded.should.equal('dukpt');\n        done();\n    });\n\n    it('should return a string with null characters removed when called removeNullCharsFromAscii', (done) => {\n        const sanitizedString = DataOperations.removeNullCharsFromAscii('abc\\u0000\\u0000');\n        sanitizedString.should.equal('abc');\n        done();\n    });\n\n    it('should return a proper hex encoded string when called numericArrayToHexstring() against a numeric array', (done) => {\n        const randomArray = getRandomNumericArray();\n        const smallNumbers = getRandomNumericArray(10);\n        const hexEncoded = DataOperations.numericArrayToHexstring(randomArray);\n        const smallHexEncoded = DataOperations.numericArrayToHexstring(smallNumbers);\n        (typeof hexEncoded).should.equal('string');\n        (typeof smallHexEncoded).should.equal('string');\n        (/[a-fA-F0-9]/).test(hexEncoded).should.be.true();\n        (/[a-fA-F0-9]/).test(smallHexEncoded).should.be.true();\n        done();\n    });\n\n    it('should return an array when called hexstringToNumericArray against a hex string', (done) => {\n        const randomArray = getRandomNumericArray();\n        const hexEncoded = DataOperations.numericArrayToHexstring(randomArray);\n        const resultArr = DataOperations.hexstringToNumericArray(hexEncoded);\n        resultArr.forEach((number, i) => {\n            number.should.equal(randomArray[i]);\n        } );\n        done();\n    });\n\n    it('should return a hex string when converted using hexToText', (done) => {\n        const randomString = getRandomString();\n        const hexEncoded = Buffer.from(randomString).toString('hex');\n        const result = DataOperations.hexToText(hexEncoded);\n        result.should.equal(randomString);\n        done();\n    });\n\n    it('should return correct output when string \"dukpt\" is xored with \"aes\"', (done) => {\n        const str1 = 'dukpt';\n        const str2 = 'aes';\n        let xorOutput = DataOperations.XORdata(str1, str2);\n        parseInt(Buffer.from(xorOutput, 'ascii').toString('hex'), 16).should.equal(431460324615);\n        xorOutput = DataOperations.XORdata(str2, str1);\n        parseInt(Buffer.from(xorOutput, 'ascii').toString('hex'), 16).should.equal(431460324615);\n        done();\n    });\n\n    it('should return correct output when hex string of \"dukpt\" is xored with hex string of \"aes\"', (done) => {\n        const str1Hex = Buffer.from('dukpt', 'ascii').toString('hex');\n        const str2Hex = Buffer.from('aes', 'ascii').toString('hex');\n        let xorOutputHex = DataOperations.XORdataHex(str1Hex, str2Hex);\n        parseInt(xorOutputHex, 16).should.equal(431460324615);\n        xorOutputHex = DataOperations.XORdataHex(str2Hex, str1Hex);\n        parseInt(xorOutputHex, 16).should.equal(431460324615);\n        done();\n    });\n\n    it('should return correct output when two ascii strings evaluated with bitwise AND', (done) => {\n        const str1 = 'dukpt';\n        const str2 = 'aes';\n        let andOutput = DataOperations.ANDdata(str1, str2);\n        parseInt(Buffer.from(andOutput, 'ascii').toString('hex'), 16).should.equal(6381680);\n        let andOutputReversed = DataOperations.ANDdata(str2, str1);\n        parseInt(Buffer.from(andOutputReversed, 'ascii').toString('hex'), 16).should.equal(6381680);\n        done();\n    });\n\n    it('should return true when any of the array elements is empty', (done) => {\n        const randomArrayWithEmpty = getRandomStringArray(true);\n        const randomArray = getRandomStringArray(false);\n        DataOperations.fieldEmpty(randomArrayWithEmpty).should.be.true();\n        DataOperations.fieldEmpty(randomArray).should.be.false();\n        done();\n    });\n});\n\n"]}
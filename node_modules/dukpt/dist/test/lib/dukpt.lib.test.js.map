{"version":3,"sources":["../../../test/lib/dukpt.lib.test.js"],"names":["should","require","Dukpt","RandExp","sinon","dukpt","sandbox","bdk","ksn","cc_trackdata_example","cc_trackdata_hex_example","cc_trackdata_3des_encrypted_sample","cc_trackdata_aes_encrypted_sample","getRandomText","gen","getRandomHexText","Buffer","from","toString","describe","beforeEach","it","done","encrypted","dukptEncrypt","inputEncoding","equal","err","exist","message","encryptionMode","dukptDecrypt","outputEncoding","toLowerCase","decryptionMode","trimOutput","create","afterEach","restore","stub","dukptSessKey","generateDukptSessionKey"],"mappings":"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","file":"dukpt.lib.test.js","sourcesContent":["const should = require('should');\nconst Dukpt = require('../../index');\nconst RandExp = require('randexp');\nconst sinon = require('sinon');\n\nlet dukpt = null;\nlet sandbox = null;\nlet bdk = '0123456789ABCDEFFEDCBA9876543210';\nlet ksn = 'FFFFFFFFFFFFFFFFFFFF';\nlet cc_trackdata_example = '%B4815881002861896^YATES/EUGENE JOHN              ^37829821000123456789?'; // taken from wikipedia. not an actual card\nlet cc_trackdata_hex_example = '2542343831353838313030323836313839365e59415445532f455547454e45204a4f484e20202020202020202020202020205e33373832393832313030303132333435363738393f';\nlet cc_trackdata_3des_encrypted_sample = '88B0208C24474EB41EE216D3BD0D226777FBBE15CEB7A2F840F16588FA583100848D334DD1B33CCD03728AD03E65993BB82F969EC4C5A68A83B8C5D80CC899D0E5C184D5BA48E7FF';\nlet cc_trackdata_aes_encrypted_sample = '6773ECC682BA7419F7035B4097BF4052D0460D90165651F7CA6760E612F422DA68D6385D2F5705B5F5A8A2DABEA93BEA157ED634E0729923FD8F720985F3624D06FAA7B133883B8FA5860294FAF36F80';\n\nfunction getRandomText() {\n    return new RandExp(/[A-Z0-9]{50}/).gen();\n}\n\nfunction getRandomHexText() {\n    return Buffer.from(getRandomText(), 'ascii').toString('hex');\n}\n\ndescribe('dukpt encryption tests with hex output encoding and 3des encryption mode', () => {\n\n    beforeEach(()=> {\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    it('should generate correct encrypted output when input encoding type : ascii', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_example, {\n            inputEncoding: 'ascii'\n        });\n\n        encrypted.should.equal(cc_trackdata_3des_encrypted_sample);\n        done();\n    });\n\n    it('should generate correct encrypted output when input encoding type : hex', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_hex_example, {\n            inputEncoding: 'hex'\n        });\n\n        encrypted.should.equal(cc_trackdata_3des_encrypted_sample);\n        done();\n    });\n\n    it('should throw an error when unknown input encoding provided', (done) => {\n        try {\n            dukpt.dukptEncrypt(cc_trackdata_hex_example, {\n                inputEncoding: 'unknown'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('unsupported input encoding type for dukpt encrypt : \\'unknown\\'');\n        }\n        done();\n    });\n\n    it('should throw an error when input string is not provided', (done) => {\n        try{\n            dukpt.dukptEncrypt(false, {\n                inputEncoding: 'hex'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('either session key or data not provided');\n        }\n        done();\n    });\n});\ndescribe('dukpt encryption tests with hex output encoding and aes encryption mode', () => {\n\n    beforeEach(()=> {\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    it('should generate correct encrypted output when input encoding type : ascii', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_example, {\n            inputEncoding: 'ascii',\n            encryptionMode: 'AES'\n        });\n\n        encrypted.should.equal(cc_trackdata_aes_encrypted_sample);\n        done();\n    });\n\n    it('should generate correct encrypted output when input encoding type : hex', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_hex_example, {\n            inputEncoding: 'hex',\n            encryptionMode: 'AES'\n        });\n\n        encrypted.should.equal(cc_trackdata_aes_encrypted_sample);\n        done();\n    });\n\n    it('should throw an error when unknown input encoding provided', (done) => {\n        try {\n            dukpt.dukptEncrypt(cc_trackdata_hex_example, {\n                inputEncoding: 'unknown',\n                encryptionMode: 'AES'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('unsupported input encoding type for dukpt encrypt : \\'unknown\\'');\n        }\n        done();\n    });\n\n    it('should throw an error when input string is not provided', (done) => {\n        try{\n            dukpt.dukptEncrypt(false, {\n                inputEncoding: 'hex',\n                encryptionMode: 'AES'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('either session key or data not provided');\n        }\n        done();\n    });\n});\n\ndescribe('dukpt decryption tests with hex input encoding and 3des encryption mode', () => {\n\n    beforeEach(()=> {\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    it('should generate correct decrypted output when output encoding type : ascii', (done) => {\n        let encrypted = dukpt.dukptDecrypt(cc_trackdata_3des_encrypted_sample, {\n            outputEncoding: 'ascii'\n        });\n\n        encrypted.should.equal(cc_trackdata_example);\n        done();\n    });\n\n    it('should generate correct decrypted output when output encoding type : hex', (done) => {\n        let encrypted = dukpt.dukptDecrypt(cc_trackdata_3des_encrypted_sample, {\n            outputEncoding: 'hex'\n        });\n\n        encrypted.toLowerCase().should.equal(cc_trackdata_hex_example);\n        done();\n    });\n\n    it('should throw an error when unknown output encoding provided', (done) => {\n        try {\n            dukpt.dukptDecrypt(cc_trackdata_3des_encrypted_sample, {\n                outputEncoding: 'unknown'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('unsupported output encoding for dukpt decrypt');\n        }\n        done();\n    });\n\n    it('should throw an error when input encrypted string is not provided', (done) => {\n        try{\n            dukpt.dukptDecrypt(false, {\n                outputEncoding: 'ascii'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('either session key or data not provided');\n        }\n        done();\n    });\n});\ndescribe('dukpt decryption tests with hex input encoding and aes encryption mode', () => {\n\n    beforeEach(()=> {\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    it('should generate correct decrypted output when output encoding type : ascii', (done) => {\n        let encrypted = dukpt.dukptDecrypt(cc_trackdata_aes_encrypted_sample, {\n            outputEncoding: 'ascii',\n            decryptionMode: 'AES',\n            trimOutput: true\n        });\n\n        encrypted.should.equal(cc_trackdata_example);\n        done();\n    });\n\n    it('should generate correct decrypted output when output encoding type : hex', (done) => {\n        let encrypted = dukpt.dukptDecrypt(cc_trackdata_aes_encrypted_sample, {\n            outputEncoding: 'hex',\n            decryptionMode: 'AES',\n            trimOutput: true\n        });\n\n        encrypted.toLowerCase().should.equal(cc_trackdata_hex_example);\n        done();\n    });\n\n    it('should throw an error when unknown output encoding provided', (done) => {\n        try {\n            dukpt.dukptDecrypt(cc_trackdata_aes_encrypted_sample, {\n                outputEncoding: 'unknown',\n                decryptionMode: 'AES'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('unsupported output encoding for dukpt decrypt');\n        }\n        done();\n    });\n\n    it('should throw an error when input encrypted string is not provided', (done) => {\n        try{\n            dukpt.dukptDecrypt(false, {\n                outputEncoding: 'ascii',\n                decryptionMode: 'AES'\n            });\n        }\n        catch(err){\n            should.exist(err);\n            err.message.should.equal('either session key or data not provided');\n        }\n        done();\n    });\n});\n\ndescribe('internal methods test suite', () => {\n\n    beforeEach(() => {\n        sandbox = sinon.sandbox.create();\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    afterEach(() => {\n        sandbox.restore();\n        dukpt = null;\n    });\n\n    it('should generate dukpt session key provided ipek and ksn', (done) => {\n        const stub = sinon.stub(Dukpt, '_createDataKeyHex', () => '123');\n\n        const dukptSessKey = Dukpt.generateDukptSessionKey(getRandomHexText(), getRandomHexText());\n\n        dukptSessKey.should.equal('123');\n        stub.restore();\n        done();\n    });\n\n    it('should throw an error when either ipek or ksn is not provided for generateDukptSessionKey', (done) => {\n        const stub = sinon.stub(Dukpt, '_createDataKeyHex', () => '123' );\n        try{\n            Dukpt.generateDukptSessionKey('', getRandomHexText());\n        }\n        catch (err){\n            should.exist(err);\n            err.message.should.equal('either IPEK or data params not provided');\n        }\n\n        try{\n            Dukpt.generateDukptSessionKey(getRandomHexText(), '');\n        }\n        catch (err){\n            should.exist(err);\n            err.message.should.equal('either IPEK or data params not provided');\n        }\n        stub.restore();\n        done();\n    });\n});\n"]}
{"version":3,"sources":["../../../test/lib/encryption.lib.test.js"],"names":["RandExp","require","Encryption","crypto","should","generateRandomString","gen","describe","it","done","randomString","key","createHash","update","digest","toString","encrypted","encryptAES","Buffer","from","test","be","true","err","exist","console","log","length","decrypted","decryptAES","equal","decryptKey"],"mappings":"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","file":"encryption.lib.test.js","sourcesContent":["const RandExp = require('randexp');\nconst Encryption = require('../../lib/encryption.lib');\nconst crypto = require('crypto');\nconst should = require('should');\n\nfunction generateRandomString() {\n    return new RandExp(/[a-zA-Z0-9]{15}/).gen();\n}\n\ndescribe('aes encryption test suite', () => {\n    it('should encrypt a string properly and should output a hex encoded string', (done) => {\n        const randomString = generateRandomString();\n        const key = crypto.createHash('sha256').update(randomString).digest().toString('hex');\n        const encrypted = Encryption.encryptAES(key,Buffer.from(randomString, 'ascii').toString('hex'));\n        (/^[a-fA-F0-9]+$/).test(encrypted).should.be.true();\n        done();\n    });\n\n    it('should throw an error when a key with an incorrect length is provided for encryption', (done) => {\n        const randomString = generateRandomString();\n        const key = crypto.createHash('sha512').update(randomString).digest().toString('hex');\n        try{\n            Encryption.encryptAES(key,Buffer.from(randomString, 'ascii').toString('hex'));\n        }\n        catch(err){\n            should.exist(err);\n        }\n\n        done();\n    });\n});\n\ndescribe('aes decryption test suite', () => {\n    it('should decrypt an encrypted string properly and should output a hex encoded string', (done) => {\n        const randomString = generateRandomString();\n        const key = crypto.createHash('sha256').update(randomString).digest().toString('hex');\n        const encrypted = Encryption.encryptAES(key,Buffer.from(randomString, 'ascii').toString('hex'));\n\n        console.log(`${randomString} : ${randomString.length}`);\n        console.log(`key: ${key}`);\n        console.log(`encrypted string: ${encrypted}`);\n\n        const decrypted = Encryption.decryptAES(key, encrypted);\n\n        (/^[a-fA-F0-9]+$/).test(decrypted).should.be.true();\n        (Buffer.from(decrypted, 'hex')).toString('ascii').should.equal(randomString);\n        done();\n    });\n\n    it('should throw an error when a key with an incorrect length is provided for decryption', (done) => {\n        const randomString = generateRandomString();\n        const key = crypto.createHash('sha256').update(randomString).digest().toString('hex');\n        const decryptKey = crypto.createHash('sha512').update(randomString).digest().toString('hex');\n        const encrypted = Encryption.encryptAES(key,Buffer.from(randomString, 'ascii').toString('hex'));\n\n        try{\n            Encryption.decryptAES(decryptKey, encrypted);\n        }\n        catch(err){\n            should.exist(err);\n        }\n\n        done();\n    });\n});\n"]}